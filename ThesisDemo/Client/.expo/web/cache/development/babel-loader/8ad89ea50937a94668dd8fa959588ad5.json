{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Commands = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar cloneDeepWith_1 = tslib_1.__importDefault(require(\"lodash/cloneDeepWith\"));\n\nvar cloneDeep_1 = tslib_1.__importDefault(require(\"lodash/cloneDeep\"));\n\nvar map_1 = tslib_1.__importDefault(require(\"lodash/map\"));\n\nvar CommandName_1 = require(\"../interfaces/CommandName\");\n\nvar Commands = function () {\n  function Commands(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {\n    _classCallCheck(this, Commands);\n\n    this.store = store;\n    this.nativeCommandsSender = nativeCommandsSender;\n    this.layoutTreeParser = layoutTreeParser;\n    this.layoutTreeCrawler = layoutTreeCrawler;\n    this.commandsObserver = commandsObserver;\n    this.uniqueIdProvider = uniqueIdProvider;\n    this.optionsProcessor = optionsProcessor;\n    this.layoutProcessor = layoutProcessor;\n    this.optionsCrawler = optionsCrawler;\n  }\n\n  _createClass(Commands, [{\n    key: \"setRoot\",\n    value: function setRoot(simpleApi) {\n      var _this = this;\n\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input.root);\n      var processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n      var root = this.layoutTreeParser.parse(processedRoot);\n      var modals = map_1.default(input.modals, function (modal) {\n        _this.optionsCrawler.crawl(modal);\n\n        var processedModal = _this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n\n        return _this.layoutTreeParser.parse(processedModal);\n      });\n      var overlays = map_1.default(input.overlays, function (overlay) {\n        _this.optionsCrawler.crawl(overlay);\n\n        var processedOverlay = _this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n\n        return _this.layoutTreeParser.parse(processedOverlay);\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n        commandId: commandId,\n        layout: {\n          root: root,\n          modals: modals,\n          overlays: overlays\n        }\n      });\n      this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n      modals.forEach(function (modalLayout) {\n        _this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n      });\n      overlays.forEach(function (overlayLayout) {\n        _this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n      });\n      var result = this.nativeCommandsSender.setRoot(commandId, {\n        root: root,\n        modals: modals,\n        overlays: overlays\n      });\n      return result;\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      var input = cloneDeep_1.default(options);\n      this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n      this.nativeCommandsSender.setDefaultOptions(input);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, {\n        options: options\n      });\n    }\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(componentId, options) {\n      var input = cloneDeep_1.default(options);\n      this.optionsProcessor.processOptions(input, CommandName_1.CommandName.MergeOptions);\n      this.nativeCommandsSender.mergeOptions(componentId, input);\n      this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, {\n        componentId: componentId,\n        options: options\n      });\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(componentId, props) {\n      this.store.updateProps(componentId, props);\n      this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, {\n        componentId: componentId,\n        props: props\n      });\n    }\n  }, {\n    key: \"showModal\",\n    value: function showModal(layout) {\n      var layoutCloned = cloneLayout(layout);\n      this.optionsCrawler.crawl(layoutCloned);\n      var layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n      var layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, {\n        commandId: commandId,\n        layout: layoutNode\n      });\n      this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n      var result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n      return result;\n    }\n  }, {\n    key: \"dismissModal\",\n    value: function dismissModal(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n      var result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"dismissAllModals\",\n    value: function dismissAllModals(mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n      var result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, {\n        commandId: commandId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"push\",\n    value: function push(componentId, simpleApi) {\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n      this.commandsObserver.notify(CommandName_1.CommandName.Push, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n      var result = this.nativeCommandsSender.push(commandId, componentId, layout);\n      return result;\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n      var result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.Pop, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popTo\",\n    value: function popTo(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n      var result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopTo, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n      var result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"setStackRoot\",\n    value: function setStackRoot(componentId, children) {\n      var _this2 = this;\n\n      var input = map_1.default(cloneLayout(children), function (simpleApi) {\n        _this2.optionsCrawler.crawl(simpleApi);\n\n        var layoutProcessed = _this2.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n\n        var layout = _this2.layoutTreeParser.parse(layoutProcessed);\n\n        return layout;\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: input\n      });\n      input.forEach(function (layoutNode) {\n        _this2.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n      });\n      var result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n      return result;\n    }\n  }, {\n    key: \"showOverlay\",\n    value: function showOverlay(simpleApi) {\n      var input = cloneLayout(simpleApi);\n      this.optionsCrawler.crawl(input);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, {\n        commandId: commandId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n      var result = this.nativeCommandsSender.showOverlay(commandId, layout);\n      return result;\n    }\n  }, {\n    key: \"dismissOverlay\",\n    value: function dismissOverlay(componentId) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n      var result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, {\n        commandId: commandId,\n        componentId: componentId\n      });\n      return result;\n    }\n  }, {\n    key: \"dismissAllOverlays\",\n    value: function dismissAllOverlays() {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllOverlays);\n      var result = this.nativeCommandsSender.dismissAllOverlays(commandId);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissAllOverlays, {\n        commandId: commandId\n      });\n      return result;\n    }\n  }, {\n    key: \"getLaunchArgs\",\n    value: function getLaunchArgs() {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n      var result = this.nativeCommandsSender.getLaunchArgs(commandId);\n      this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, {\n        commandId: commandId\n      });\n      return result;\n    }\n  }]);\n\n  return Commands;\n}();\n\nexports.Commands = Commands;\n\nfunction cloneLayout(layout) {\n  return cloneDeepWith_1.default(layout, function (value, key) {\n    if (key === 'passProps' && typeof value === 'object' && value !== null) return _objectSpread({}, value);\n  });\n}","map":{"version":3,"sources":["/Users/lunli/Thesis_LL&TJ/Thesis/ThesisDemo/Client/node_modules/react-native-navigation/lib/dist/commands/Commands.js"],"names":["Object","defineProperty","exports","value","Commands","tslib_1","require","cloneDeepWith_1","__importDefault","cloneDeep_1","map_1","CommandName_1","store","nativeCommandsSender","layoutTreeParser","layoutTreeCrawler","commandsObserver","uniqueIdProvider","optionsProcessor","layoutProcessor","optionsCrawler","simpleApi","input","cloneLayout","crawl","root","processedRoot","process","CommandName","SetRoot","parse","modals","default","modal","processedModal","overlays","overlay","processedOverlay","commandId","generate","notify","layout","forEach","modalLayout","overlayLayout","result","setRoot","options","processDefaultOptions","SetDefaultOptions","setDefaultOptions","componentId","processOptions","MergeOptions","mergeOptions","props","updateProps","UpdateProps","layoutCloned","layoutProcessed","ShowModal","layoutNode","showModal","DismissModal","dismissModal","DismissAllModals","dismissAllModals","Push","push","Pop","pop","PopTo","popTo","PopToRoot","popToRoot","children","SetStackRoot","setStackRoot","ShowOverlay","showOverlay","DismissOverlay","dismissOverlay","DismissAllOverlays","dismissAllOverlays","GetLaunchArgs","getLaunchArgs","key"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAMC,eAAe,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,sBAAD,CAA/B,CAAxB;;AACA,IAAMG,WAAW,GAAGJ,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,kBAAD,CAA/B,CAApB;;AACA,IAAMI,KAAK,GAAGL,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,YAAD,CAA/B,CAAd;;AACA,IAAMK,aAAa,GAAGL,OAAO,6BAA7B;;IACMF,Q;AACF,oBAAYQ,KAAZ,EAAmBC,oBAAnB,EAAyCC,gBAAzC,EAA2DC,iBAA3D,EAA8EC,gBAA9E,EAAgGC,gBAAhG,EAAkHC,gBAAlH,EAAoIC,eAApI,EAAqJC,cAArJ,EAAqK;AAAA;;AACjK,SAAKR,KAAL,GAAaA,KAAb;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;;;;WACD,iBAAQC,SAAR,EAAmB;AAAA;;AACf,UAAMC,KAAK,GAAGC,WAAW,CAACF,SAAD,CAAzB;AACA,WAAKD,cAAL,CAAoBI,KAApB,CAA0BF,KAAK,CAACG,IAAhC;AACA,UAAMC,aAAa,GAAG,KAAKP,eAAL,CAAqBQ,OAArB,CAA6BL,KAAK,CAACG,IAAnC,EAAyCd,aAAa,CAACiB,WAAd,CAA0BC,OAAnE,CAAtB;AACA,UAAMJ,IAAI,GAAG,KAAKX,gBAAL,CAAsBgB,KAAtB,CAA4BJ,aAA5B,CAAb;AACA,UAAMK,MAAM,GAAGrB,KAAK,CAACsB,OAAN,CAAcV,KAAK,CAACS,MAApB,EAA4B,UAACE,KAAD,EAAW;AAClD,QAAA,KAAI,CAACb,cAAL,CAAoBI,KAApB,CAA0BS,KAA1B;;AACA,YAAMC,cAAc,GAAG,KAAI,CAACf,eAAL,CAAqBQ,OAArB,CAA6BM,KAA7B,EAAoCtB,aAAa,CAACiB,WAAd,CAA0BC,OAA9D,CAAvB;;AACA,eAAO,KAAI,CAACf,gBAAL,CAAsBgB,KAAtB,CAA4BI,cAA5B,CAAP;AACH,OAJc,CAAf;AAKA,UAAMC,QAAQ,GAAGzB,KAAK,CAACsB,OAAN,CAAcV,KAAK,CAACa,QAApB,EAA8B,UAACC,OAAD,EAAa;AACxD,QAAA,KAAI,CAAChB,cAAL,CAAoBI,KAApB,CAA0BY,OAA1B;;AACA,YAAMC,gBAAgB,GAAG,KAAI,CAAClB,eAAL,CAAqBQ,OAArB,CAA6BS,OAA7B,EAAsCzB,aAAa,CAACiB,WAAd,CAA0BC,OAAhE,CAAzB;;AACA,eAAO,KAAI,CAACf,gBAAL,CAAsBgB,KAAtB,CAA4BO,gBAA5B,CAAP;AACH,OAJgB,CAAjB;AAKA,UAAMC,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BC,OAAzD,CAAlB;AACA,WAAKb,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BC,OAAvD,EAAgE;AAC5DS,QAAAA,SAAS,EAATA,SAD4D;AAE5DG,QAAAA,MAAM,EAAE;AAAEhB,UAAAA,IAAI,EAAJA,IAAF;AAAQM,UAAAA,MAAM,EAANA,MAAR;AAAgBI,UAAAA,QAAQ,EAARA;AAAhB;AAFoD,OAAhE;AAIA,WAAKpB,iBAAL,CAAuBS,KAAvB,CAA6BC,IAA7B,EAAmCd,aAAa,CAACiB,WAAd,CAA0BC,OAA7D;AACAE,MAAAA,MAAM,CAACW,OAAP,CAAe,UAACC,WAAD,EAAiB;AAC5B,QAAA,KAAI,CAAC5B,iBAAL,CAAuBS,KAAvB,CAA6BmB,WAA7B,EAA0ChC,aAAa,CAACiB,WAAd,CAA0BC,OAApE;AACH,OAFD;AAGAM,MAAAA,QAAQ,CAACO,OAAT,CAAiB,UAACE,aAAD,EAAmB;AAChC,QAAA,KAAI,CAAC7B,iBAAL,CAAuBS,KAAvB,CAA6BoB,aAA7B,EAA4CjC,aAAa,CAACiB,WAAd,CAA0BC,OAAtE;AACH,OAFD;AAGA,UAAMgB,MAAM,GAAG,KAAKhC,oBAAL,CAA0BiC,OAA1B,CAAkCR,SAAlC,EAA6C;AAAEb,QAAAA,IAAI,EAAJA,IAAF;AAAQM,QAAAA,MAAM,EAANA,MAAR;AAAgBI,QAAAA,QAAQ,EAARA;AAAhB,OAA7C,CAAf;AACA,aAAOU,MAAP;AACH;;;WACD,2BAAkBE,OAAlB,EAA2B;AACvB,UAAMzB,KAAK,GAAGb,WAAW,CAACuB,OAAZ,CAAoBe,OAApB,CAAd;AACA,WAAK7B,gBAAL,CAAsB8B,qBAAtB,CAA4C1B,KAA5C,EAAmDX,aAAa,CAACiB,WAAd,CAA0BqB,iBAA7E;AACA,WAAKpC,oBAAL,CAA0BqC,iBAA1B,CAA4C5B,KAA5C;AACA,WAAKN,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BqB,iBAAvD,EAA0E;AAAEF,QAAAA,OAAO,EAAPA;AAAF,OAA1E;AACH;;;WACD,sBAAaI,WAAb,EAA0BJ,OAA1B,EAAmC;AAC/B,UAAMzB,KAAK,GAAGb,WAAW,CAACuB,OAAZ,CAAoBe,OAApB,CAAd;AACA,WAAK7B,gBAAL,CAAsBkC,cAAtB,CAAqC9B,KAArC,EAA4CX,aAAa,CAACiB,WAAd,CAA0ByB,YAAtE;AACA,WAAKxC,oBAAL,CAA0ByC,YAA1B,CAAuCH,WAAvC,EAAoD7B,KAApD;AACA,WAAKN,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0ByB,YAAvD,EAAqE;AAAEF,QAAAA,WAAW,EAAXA,WAAF;AAAeJ,QAAAA,OAAO,EAAPA;AAAf,OAArE;AACH;;;WACD,qBAAYI,WAAZ,EAAyBI,KAAzB,EAAgC;AAC5B,WAAK3C,KAAL,CAAW4C,WAAX,CAAuBL,WAAvB,EAAoCI,KAApC;AACA,WAAKvC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0B6B,WAAvD,EAAoE;AAAEN,QAAAA,WAAW,EAAXA,WAAF;AAAeI,QAAAA,KAAK,EAALA;AAAf,OAApE;AACH;;;WACD,mBAAUd,MAAV,EAAkB;AACd,UAAMiB,YAAY,GAAGnC,WAAW,CAACkB,MAAD,CAAhC;AACA,WAAKrB,cAAL,CAAoBI,KAApB,CAA0BkC,YAA1B;AACA,UAAMC,eAAe,GAAG,KAAKxC,eAAL,CAAqBQ,OAArB,CAA6B+B,YAA7B,EAA2C/C,aAAa,CAACiB,WAAd,CAA0BgC,SAArE,CAAxB;AACA,UAAMC,UAAU,GAAG,KAAK/C,gBAAL,CAAsBgB,KAAtB,CAA4B6B,eAA5B,CAAnB;AACA,UAAMrB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BgC,SAAzD,CAAlB;AACA,WAAK5C,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BgC,SAAvD,EAAkE;AAAEtB,QAAAA,SAAS,EAATA,SAAF;AAAaG,QAAAA,MAAM,EAAEoB;AAArB,OAAlE;AACA,WAAK9C,iBAAL,CAAuBS,KAAvB,CAA6BqC,UAA7B,EAAyClD,aAAa,CAACiB,WAAd,CAA0BgC,SAAnE;AACA,UAAMf,MAAM,GAAG,KAAKhC,oBAAL,CAA0BiD,SAA1B,CAAoCxB,SAApC,EAA+CuB,UAA/C,CAAf;AACA,aAAOhB,MAAP;AACH;;;WACD,sBAAaM,WAAb,EAA0BG,YAA1B,EAAwC;AACpC,UAAMhB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BmC,YAAzD,CAAlB;AACA,UAAMlB,MAAM,GAAG,KAAKhC,oBAAL,CAA0BmD,YAA1B,CAAuC1B,SAAvC,EAAkDa,WAAlD,EAA+DG,YAA/D,CAAf;AACA,WAAKtC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BmC,YAAvD,EAAqE;AACjEzB,QAAAA,SAAS,EAATA,SADiE;AAEjEa,QAAAA,WAAW,EAAXA,WAFiE;AAGjEG,QAAAA,YAAY,EAAZA;AAHiE,OAArE;AAKA,aAAOT,MAAP;AACH;;;WACD,0BAAiBS,YAAjB,EAA+B;AAC3B,UAAMhB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BqC,gBAAzD,CAAlB;AACA,UAAMpB,MAAM,GAAG,KAAKhC,oBAAL,CAA0BqD,gBAA1B,CAA2C5B,SAA3C,EAAsDgB,YAAtD,CAAf;AACA,WAAKtC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BqC,gBAAvD,EAAyE;AAAE3B,QAAAA,SAAS,EAATA,SAAF;AAAagB,QAAAA,YAAY,EAAZA;AAAb,OAAzE;AACA,aAAOT,MAAP;AACH;;;WACD,cAAKM,WAAL,EAAkB9B,SAAlB,EAA6B;AACzB,UAAMC,KAAK,GAAGC,WAAW,CAACF,SAAD,CAAzB;AACA,WAAKD,cAAL,CAAoBI,KAApB,CAA0BF,KAA1B;AACA,UAAMqC,eAAe,GAAG,KAAKxC,eAAL,CAAqBQ,OAArB,CAA6BL,KAA7B,EAAoCX,aAAa,CAACiB,WAAd,CAA0BuC,IAA9D,CAAxB;AACA,UAAM1B,MAAM,GAAG,KAAK3B,gBAAL,CAAsBgB,KAAtB,CAA4B6B,eAA5B,CAAf;AACA,UAAMrB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BuC,IAAzD,CAAlB;AACA,WAAKnD,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BuC,IAAvD,EAA6D;AAAE7B,QAAAA,SAAS,EAATA,SAAF;AAAaa,QAAAA,WAAW,EAAXA,WAAb;AAA0BV,QAAAA,MAAM,EAANA;AAA1B,OAA7D;AACA,WAAK1B,iBAAL,CAAuBS,KAAvB,CAA6BiB,MAA7B,EAAqC9B,aAAa,CAACiB,WAAd,CAA0BuC,IAA/D;AACA,UAAMtB,MAAM,GAAG,KAAKhC,oBAAL,CAA0BuD,IAA1B,CAA+B9B,SAA/B,EAA0Ca,WAA1C,EAAuDV,MAAvD,CAAf;AACA,aAAOI,MAAP;AACH;;;WACD,aAAIM,WAAJ,EAAiBG,YAAjB,EAA+B;AAC3B,UAAMhB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0ByC,GAAzD,CAAlB;AACA,UAAMxB,MAAM,GAAG,KAAKhC,oBAAL,CAA0ByD,GAA1B,CAA8BhC,SAA9B,EAAyCa,WAAzC,EAAsDG,YAAtD,CAAf;AACA,WAAKtC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0ByC,GAAvD,EAA4D;AAAE/B,QAAAA,SAAS,EAATA,SAAF;AAAaa,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAA5D;AACA,aAAOT,MAAP;AACH;;;WACD,eAAMM,WAAN,EAAmBG,YAAnB,EAAiC;AAC7B,UAAMhB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0B2C,KAAzD,CAAlB;AACA,UAAM1B,MAAM,GAAG,KAAKhC,oBAAL,CAA0B2D,KAA1B,CAAgClC,SAAhC,EAA2Ca,WAA3C,EAAwDG,YAAxD,CAAf;AACA,WAAKtC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0B2C,KAAvD,EAA8D;AAAEjC,QAAAA,SAAS,EAATA,SAAF;AAAaa,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAA9D;AACA,aAAOT,MAAP;AACH;;;WACD,mBAAUM,WAAV,EAAuBG,YAAvB,EAAqC;AACjC,UAAMhB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0B6C,SAAzD,CAAlB;AACA,UAAM5B,MAAM,GAAG,KAAKhC,oBAAL,CAA0B6D,SAA1B,CAAoCpC,SAApC,EAA+Ca,WAA/C,EAA4DG,YAA5D,CAAf;AACA,WAAKtC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0B6C,SAAvD,EAAkE;AAAEnC,QAAAA,SAAS,EAATA,SAAF;AAAaa,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAAlE;AACA,aAAOT,MAAP;AACH;;;WACD,sBAAaM,WAAb,EAA0BwB,QAA1B,EAAoC;AAAA;;AAChC,UAAMrD,KAAK,GAAGZ,KAAK,CAACsB,OAAN,CAAcT,WAAW,CAACoD,QAAD,CAAzB,EAAqC,UAACtD,SAAD,EAAe;AAC9D,QAAA,MAAI,CAACD,cAAL,CAAoBI,KAApB,CAA0BH,SAA1B;;AACA,YAAMsC,eAAe,GAAG,MAAI,CAACxC,eAAL,CAAqBQ,OAArB,CAA6BN,SAA7B,EAAwCV,aAAa,CAACiB,WAAd,CAA0BgD,YAAlE,CAAxB;;AACA,YAAMnC,MAAM,GAAG,MAAI,CAAC3B,gBAAL,CAAsBgB,KAAtB,CAA4B6B,eAA5B,CAAf;;AACA,eAAOlB,MAAP;AACH,OALa,CAAd;AAMA,UAAMH,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BgD,YAAzD,CAAlB;AACA,WAAK5D,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BgD,YAAvD,EAAqE;AACjEtC,QAAAA,SAAS,EAATA,SADiE;AAEjEa,QAAAA,WAAW,EAAXA,WAFiE;AAGjEV,QAAAA,MAAM,EAAEnB;AAHyD,OAArE;AAKAA,MAAAA,KAAK,CAACoB,OAAN,CAAc,UAACmB,UAAD,EAAgB;AAC1B,QAAA,MAAI,CAAC9C,iBAAL,CAAuBS,KAAvB,CAA6BqC,UAA7B,EAAyClD,aAAa,CAACiB,WAAd,CAA0BgD,YAAnE;AACH,OAFD;AAGA,UAAM/B,MAAM,GAAG,KAAKhC,oBAAL,CAA0BgE,YAA1B,CAAuCvC,SAAvC,EAAkDa,WAAlD,EAA+D7B,KAA/D,CAAf;AACA,aAAOuB,MAAP;AACH;;;WACD,qBAAYxB,SAAZ,EAAuB;AACnB,UAAMC,KAAK,GAAGC,WAAW,CAACF,SAAD,CAAzB;AACA,WAAKD,cAAL,CAAoBI,KAApB,CAA0BF,KAA1B;AACA,UAAMqC,eAAe,GAAG,KAAKxC,eAAL,CAAqBQ,OAArB,CAA6BL,KAA7B,EAAoCX,aAAa,CAACiB,WAAd,CAA0BkD,WAA9D,CAAxB;AACA,UAAMrC,MAAM,GAAG,KAAK3B,gBAAL,CAAsBgB,KAAtB,CAA4B6B,eAA5B,CAAf;AACA,UAAMrB,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BkD,WAAzD,CAAlB;AACA,WAAK9D,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BkD,WAAvD,EAAoE;AAAExC,QAAAA,SAAS,EAATA,SAAF;AAAaG,QAAAA,MAAM,EAANA;AAAb,OAApE;AACA,WAAK1B,iBAAL,CAAuBS,KAAvB,CAA6BiB,MAA7B,EAAqC9B,aAAa,CAACiB,WAAd,CAA0BkD,WAA/D;AACA,UAAMjC,MAAM,GAAG,KAAKhC,oBAAL,CAA0BkE,WAA1B,CAAsCzC,SAAtC,EAAiDG,MAAjD,CAAf;AACA,aAAOI,MAAP;AACH;;;WACD,wBAAeM,WAAf,EAA4B;AACxB,UAAMb,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BoD,cAAzD,CAAlB;AACA,UAAMnC,MAAM,GAAG,KAAKhC,oBAAL,CAA0BoE,cAA1B,CAAyC3C,SAAzC,EAAoDa,WAApD,CAAf;AACA,WAAKnC,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BoD,cAAvD,EAAuE;AAAE1C,QAAAA,SAAS,EAATA,SAAF;AAAaa,QAAAA,WAAW,EAAXA;AAAb,OAAvE;AACA,aAAON,MAAP;AACH;;;WACD,8BAAqB;AACjB,UAAMP,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BsD,kBAAzD,CAAlB;AACA,UAAMrC,MAAM,GAAG,KAAKhC,oBAAL,CAA0BsE,kBAA1B,CAA6C7C,SAA7C,CAAf;AACA,WAAKtB,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BsD,kBAAvD,EAA2E;AAAE5C,QAAAA,SAAS,EAATA;AAAF,OAA3E;AACA,aAAOO,MAAP;AACH;;;WACD,yBAAgB;AACZ,UAAMP,SAAS,GAAG,KAAKrB,gBAAL,CAAsBsB,QAAtB,CAA+B5B,aAAa,CAACiB,WAAd,CAA0BwD,aAAzD,CAAlB;AACA,UAAMvC,MAAM,GAAG,KAAKhC,oBAAL,CAA0BwE,aAA1B,CAAwC/C,SAAxC,CAAf;AACA,WAAKtB,gBAAL,CAAsBwB,MAAtB,CAA6B7B,aAAa,CAACiB,WAAd,CAA0BwD,aAAvD,EAAsE;AAAE9C,QAAAA,SAAS,EAATA;AAAF,OAAtE;AACA,aAAOO,MAAP;AACH;;;;;;AAEL3C,OAAO,CAACE,QAAR,GAAmBA,QAAnB;;AACA,SAASmB,WAAT,CAAqBkB,MAArB,EAA6B;AACzB,SAAOlC,eAAe,CAACyB,OAAhB,CAAwBS,MAAxB,EAAgC,UAACtC,KAAD,EAAQmF,GAAR,EAAgB;AACnD,QAAIA,GAAG,KAAK,WAAR,IAAuB,OAAOnF,KAAP,KAAiB,QAAxC,IAAoDA,KAAK,KAAK,IAAlE,EACI,yBAAYA,KAAZ;AACP,GAHM,CAAP;AAIH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Commands = void 0;\nconst tslib_1 = require(\"tslib\");\nconst cloneDeepWith_1 = tslib_1.__importDefault(require(\"lodash/cloneDeepWith\"));\nconst cloneDeep_1 = tslib_1.__importDefault(require(\"lodash/cloneDeep\"));\nconst map_1 = tslib_1.__importDefault(require(\"lodash/map\"));\nconst CommandName_1 = require(\"../interfaces/CommandName\");\nclass Commands {\n    constructor(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {\n        this.store = store;\n        this.nativeCommandsSender = nativeCommandsSender;\n        this.layoutTreeParser = layoutTreeParser;\n        this.layoutTreeCrawler = layoutTreeCrawler;\n        this.commandsObserver = commandsObserver;\n        this.uniqueIdProvider = uniqueIdProvider;\n        this.optionsProcessor = optionsProcessor;\n        this.layoutProcessor = layoutProcessor;\n        this.optionsCrawler = optionsCrawler;\n    }\n    setRoot(simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input.root);\n        const processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n        const root = this.layoutTreeParser.parse(processedRoot);\n        const modals = map_1.default(input.modals, (modal) => {\n            this.optionsCrawler.crawl(modal);\n            const processedModal = this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedModal);\n        });\n        const overlays = map_1.default(input.overlays, (overlay) => {\n            this.optionsCrawler.crawl(overlay);\n            const processedOverlay = this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedOverlay);\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n            commandId,\n            layout: { root, modals, overlays },\n        });\n        this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n        modals.forEach((modalLayout) => {\n            this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n        });\n        overlays.forEach((overlayLayout) => {\n            this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n        });\n        const result = this.nativeCommandsSender.setRoot(commandId, { root, modals, overlays });\n        return result;\n    }\n    setDefaultOptions(options) {\n        const input = cloneDeep_1.default(options);\n        this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n        this.nativeCommandsSender.setDefaultOptions(input);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, { options });\n    }\n    mergeOptions(componentId, options) {\n        const input = cloneDeep_1.default(options);\n        this.optionsProcessor.processOptions(input, CommandName_1.CommandName.MergeOptions);\n        this.nativeCommandsSender.mergeOptions(componentId, input);\n        this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, { componentId, options });\n    }\n    updateProps(componentId, props) {\n        this.store.updateProps(componentId, props);\n        this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, { componentId, props });\n    }\n    showModal(layout) {\n        const layoutCloned = cloneLayout(layout);\n        this.optionsCrawler.crawl(layoutCloned);\n        const layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n        const layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, { commandId, layout: layoutNode });\n        this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n        const result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n        return result;\n    }\n    dismissModal(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n        const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n            commandId,\n            componentId,\n            mergeOptions,\n        });\n        return result;\n    }\n    dismissAllModals(mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n        const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, { commandId, mergeOptions });\n        return result;\n    }\n    push(componentId, simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n        this.commandsObserver.notify(CommandName_1.CommandName.Push, { commandId, componentId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n        const result = this.nativeCommandsSender.push(commandId, componentId, layout);\n        return result;\n    }\n    pop(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n        const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.Pop, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popTo(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n        const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopTo, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popToRoot(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n        const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    setStackRoot(componentId, children) {\n        const input = map_1.default(cloneLayout(children), (simpleApi) => {\n            this.optionsCrawler.crawl(simpleApi);\n            const layoutProcessed = this.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n            const layout = this.layoutTreeParser.parse(layoutProcessed);\n            return layout;\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n            commandId,\n            componentId,\n            layout: input,\n        });\n        input.forEach((layoutNode) => {\n            this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n        });\n        const result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n        return result;\n    }\n    showOverlay(simpleApi) {\n        const input = cloneLayout(simpleApi);\n        this.optionsCrawler.crawl(input);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, { commandId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n        const result = this.nativeCommandsSender.showOverlay(commandId, layout);\n        return result;\n    }\n    dismissOverlay(componentId) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n        const result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, { commandId, componentId });\n        return result;\n    }\n    dismissAllOverlays() {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllOverlays);\n        const result = this.nativeCommandsSender.dismissAllOverlays(commandId);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllOverlays, { commandId });\n        return result;\n    }\n    getLaunchArgs() {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n        const result = this.nativeCommandsSender.getLaunchArgs(commandId);\n        this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, { commandId });\n        return result;\n    }\n}\nexports.Commands = Commands;\nfunction cloneLayout(layout) {\n    return cloneDeepWith_1.default(layout, (value, key) => {\n        if (key === 'passProps' && typeof value === 'object' && value !== null)\n            return { ...value };\n    });\n}\n"]},"metadata":{},"sourceType":"script"}