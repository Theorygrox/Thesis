{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LayoutTreeCrawler = void 0;\n\nvar LayoutType_1 = require(\"./LayoutType\");\n\nvar LayoutTreeCrawler = function () {\n  function LayoutTreeCrawler(store, optionsProcessor) {\n    _classCallCheck(this, LayoutTreeCrawler);\n\n    this.store = store;\n    this.optionsProcessor = optionsProcessor;\n    this.crawl = this.crawl.bind(this);\n  }\n\n  _createClass(LayoutTreeCrawler, [{\n    key: \"crawl\",\n    value: function crawl(node, commandName) {\n      var _this = this;\n\n      if (node.type === LayoutType_1.LayoutType.Component) {\n        this.handleComponent(node);\n      }\n\n      this.optionsProcessor.processOptions(node.data.options, commandName);\n      node.children.forEach(function (value) {\n        return _this.crawl(value, commandName);\n      });\n    }\n  }, {\n    key: \"handleComponent\",\n    value: function handleComponent(node) {\n      this.assertComponentDataName(node);\n      this.savePropsToStore(node);\n      node.data.passProps = undefined;\n    }\n  }, {\n    key: \"savePropsToStore\",\n    value: function savePropsToStore(node) {\n      this.store.updateProps(node.id, node.data.passProps);\n    }\n  }, {\n    key: \"assertComponentDataName\",\n    value: function assertComponentDataName(component) {\n      if (!component.data.name) {\n        throw new Error('Missing component data.name');\n      }\n    }\n  }]);\n\n  return LayoutTreeCrawler;\n}();\n\nexports.LayoutTreeCrawler = LayoutTreeCrawler;","map":{"version":3,"sources":["/Users/lunli/Thesis_LL&TJ/Thesis/ThesisDemo/Client/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.js"],"names":["Object","defineProperty","exports","value","LayoutTreeCrawler","LayoutType_1","require","store","optionsProcessor","crawl","bind","node","commandName","type","LayoutType","Component","handleComponent","processOptions","data","options","children","forEach","assertComponentDataName","savePropsToStore","passProps","undefined","updateProps","id","component","name","Error"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,IAAMC,YAAY,GAAGC,OAAO,gBAA5B;;IACMF,iB;AACF,6BAAYG,KAAZ,EAAmBC,gBAAnB,EAAqC;AAAA;;AACjC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACH;;;;WACD,eAAMC,IAAN,EAAYC,WAAZ,EAAyB;AAAA;;AACrB,UAAID,IAAI,CAACE,IAAL,KAAcR,YAAY,CAACS,UAAb,CAAwBC,SAA1C,EAAqD;AACjD,aAAKC,eAAL,CAAqBL,IAArB;AACH;;AACD,WAAKH,gBAAL,CAAsBS,cAAtB,CAAqCN,IAAI,CAACO,IAAL,CAAUC,OAA/C,EAAwDP,WAAxD;AACAD,MAAAA,IAAI,CAACS,QAAL,CAAcC,OAAd,CAAsB,UAAClB,KAAD;AAAA,eAAW,KAAI,CAACM,KAAL,CAAWN,KAAX,EAAkBS,WAAlB,CAAX;AAAA,OAAtB;AACH;;;WACD,yBAAgBD,IAAhB,EAAsB;AAClB,WAAKW,uBAAL,CAA6BX,IAA7B;AACA,WAAKY,gBAAL,CAAsBZ,IAAtB;AACAA,MAAAA,IAAI,CAACO,IAAL,CAAUM,SAAV,GAAsBC,SAAtB;AACH;;;WACD,0BAAiBd,IAAjB,EAAuB;AACnB,WAAKJ,KAAL,CAAWmB,WAAX,CAAuBf,IAAI,CAACgB,EAA5B,EAAgChB,IAAI,CAACO,IAAL,CAAUM,SAA1C;AACH;;;WACD,iCAAwBI,SAAxB,EAAmC;AAC/B,UAAI,CAACA,SAAS,CAACV,IAAV,CAAeW,IAApB,EAA0B;AACtB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;AACJ;;;;;;AAEL5B,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LayoutTreeCrawler = void 0;\nconst LayoutType_1 = require(\"./LayoutType\");\nclass LayoutTreeCrawler {\n    constructor(store, optionsProcessor) {\n        this.store = store;\n        this.optionsProcessor = optionsProcessor;\n        this.crawl = this.crawl.bind(this);\n    }\n    crawl(node, commandName) {\n        if (node.type === LayoutType_1.LayoutType.Component) {\n            this.handleComponent(node);\n        }\n        this.optionsProcessor.processOptions(node.data.options, commandName);\n        node.children.forEach((value) => this.crawl(value, commandName));\n    }\n    handleComponent(node) {\n        this.assertComponentDataName(node);\n        this.savePropsToStore(node);\n        node.data.passProps = undefined;\n    }\n    savePropsToStore(node) {\n        this.store.updateProps(node.id, node.data.passProps);\n    }\n    assertComponentDataName(component) {\n        if (!component.data.name) {\n            throw new Error('Missing component data.name');\n        }\n    }\n}\nexports.LayoutTreeCrawler = LayoutTreeCrawler;\n"]},"metadata":{},"sourceType":"script"}