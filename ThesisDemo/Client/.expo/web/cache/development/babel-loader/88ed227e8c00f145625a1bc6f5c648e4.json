{"ast":null,"code":"var _jsxFileName = \"/Users/lunli/Thesis_LL&TJ/Thesis/ThesisDemo/Client/components/Footer.js\";\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport HomeScreen from \"../pages/Home\";\nimport SavedScreen from \"../pages/Saved\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar isLoggedIn = false;\n\nfunction ExploreScreen() {\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"Explore!123\"));\n}\n\nvar Tab = createBottomTabNavigator();\nexport default function App() {\n  var _this = this;\n\n  return React.createElement(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name === \"Home\") {\n            iconName = focused ? \"home\" : \"home-outline\";\n          } else if (route.name === \"Explore\") {\n            iconName = focused ? \"map\" : \"map-outline\";\n          } else if (route.name === \"Saved\") {\n            iconName = focused ? \"bookmarks\" : \"bookmarks-outline\";\n          }\n\n          return React.createElement(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 18\n            }\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: \"#007AFF\",\n      inactiveTintColor: \"gray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    initialParams: {\n      name: 42\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Explore\",\n    component: ExploreScreen,\n    options: {\n      title: 'Explore'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Saved\",\n    component: SavedScreen,\n    listeners: function listeners(_ref3) {\n      var navigation = _ref3.navigation,\n          route = _ref3.route;\n      return {\n        tabPress: function tabPress(e) {\n          e.preventDefault();\n\n          try {\n            AsyncStorage.getItem('@user_key', function (err, result) {\n              console.log(result);\n\n              if (result !== null) {\n                isLoggedIn = true;\n              } else {\n                isLoggedIn = false;\n              }\n\n              navigation.navigate(isLoggedIn ? 'Saved' : 'Signin');\n            });\n          } catch (e) {}\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/lunli/Thesis_LL&TJ/Thesis/ThesisDemo/Client/components/Footer.js"],"names":["React","createBottomTabNavigator","Ionicons","HomeScreen","SavedScreen","AsyncStorage","isLoggedIn","ExploreScreen","flex","justifyContent","alignItems","Tab","App","route","tabBarIcon","focused","color","size","iconName","name","activeTintColor","inactiveTintColor","title","navigation","tabPress","e","preventDefault","getItem","err","result","console","log","navigate"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport HomeScreen from \"../pages/Home\";\nimport SavedScreen from \"../pages/Saved\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nvar isLoggedIn = false;\n\nfunction ExploreScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <Text>Explore!123</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  return (\n\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === \"Home\") {\n            iconName = focused ? \"home\" : \"home-outline\";\n          } else if (route.name === \"Explore\") {\n            iconName = focused ? \"map\" : \"map-outline\";\n          } else if (route.name === \"Saved\") {\n            iconName = focused ? \"bookmarks\" : \"bookmarks-outline\";\n          }\n\n          // You can return any component that you like here!\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n      })}\n      tabBarOptions={{\n        activeTintColor: \"#007AFF\",\n        inactiveTintColor: \"gray\",\n      }}\n\n    >\n      <Tab.Screen name=\"Home\"\n        component={HomeScreen}\n        initialParams={{ name: 42 }}\n      />\n      <Tab.Screen name=\"Explore\"\n        component={ExploreScreen}\n        options={{ title: 'Explore' }}\n      />\n      <Tab.Screen name=\"Saved\"\n        component={SavedScreen}\n        listeners={({ navigation, route }) => ({\n          tabPress: e => {\n            // Prevent default action\n\n            e.preventDefault();\n\n            try {\n              AsyncStorage.getItem('@user_key', (err, result) => {\n                console.log(result);\n                if (result !== null) {\n                  isLoggedIn = true;\n                } else {\n                  isLoggedIn = false;\n                }\n                navigation.navigate(isLoggedIn ? 'Saved' : 'Signin');\n\n              })\n\n\n            } catch (e) {\n              // error reading value\n            }\n\n\n          },\n        })}\n      />\n    </Tab.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}